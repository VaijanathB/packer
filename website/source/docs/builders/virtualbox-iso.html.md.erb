---
modeline: |
  vim: set ft=pandoc:
description: |
    The VirtualBox Packer builder is able to create VirtualBox virtual machines
    and export them in the OVF format, starting from an ISO image.
layout: docs
page_title: 'VirtualBox ISO - Builders'
sidebar_current: 'docs-builders-virtualbox-iso'
---

# VirtualBox Builder (from an ISO)

Type: `virtualbox-iso`

The VirtualBox Packer builder is able to create
[VirtualBox](https://www.virtualbox.org/) virtual machines and export them in
the OVF format, starting from an ISO image.

The builder builds a virtual machine by creating a new virtual machine from
scratch, booting it, installing an OS, provisioning software within the OS, then
shutting it down. The result of the VirtualBox builder is a directory containing
all the files necessary to run the virtual machine portably.

## Basic Example

Here is a basic example. This example is not functional. It will start the OS
installer but then fail because we don't provide the preseed file for Ubuntu to
self-install. Still, the example serves to show the basic configuration:

``` json
{
  "type": "virtualbox-iso",
  "guest_os_type": "Ubuntu_64",
  "iso_url": "http://releases.ubuntu.com/12.04/ubuntu-12.04.5-server-amd64.iso",
  "iso_checksum": "769474248a3897f4865817446f9a4a53",
  "iso_checksum_type": "md5",
  "ssh_username": "packer",
  "ssh_password": "packer",
  "shutdown_command": "echo 'packer' | sudo -S shutdown -P now"
}
```

It is important to add a `shutdown_command`. By default Packer halts the virtual
machine and the file system may not be sync'd. Thus, changes made in a
provisioner might not be saved.

## ISO Configuration Reference

<%= partial "partials/common/ISOConfig" %>

### Required:

<%= partial "partials/common/ISOConfig-required" %>

### Optional:

<%= partial "partials/common/ISOConfig-not-required" %>

## Http directory configuration reference

<%= partial "partials/common/HTTPConfig" %>
### Optional:

<%= partial "partials/common/HTTPConfig-not-required" %>


## Floppy configuration reference

<%= partial "partials/common/FloppyConfig" %>

### Optional:

<%= partial "partials/common/FloppyConfig-not-required" %>

## Virtualbox ISO Configuration Reference

There are many configuration options available for the VirtualBox builder. They
are organized below into two categories: required and optional. Within each
category, the available options are alphabetized and described.

In addition to the options listed here, a
[communicator](/docs/templates/communicator.html) can be configured for this
builder.

### Optional:

-   `boot_command` (array of strings) - This is an array of commands to type
    when the virtual machine is first booted. The goal of these commands should
    be to type just enough to initialize the operating system installer. Special
    keys can be typed as well, and are covered in the section below on the
    boot command. If this is not specified, it is assumed the installer will
    start itself.

-   `boot_wait` (string) - The time to wait after booting the initial virtual
    machine before typing the `boot_command`. The value of this should be
    a duration. Examples are `5s` and `1m30s` which will cause Packer to wait
    five seconds and one minute 30 seconds, respectively. If this isn't
    specified, the default is `10s` or 10 seconds.

-   `cpus` (number) - The number of cpus to use for building the VM.
    Defaults to `1`.

-   `export_opts` (array of strings) - Additional options to pass to the
    [VBoxManage
    export](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export). This
    can be useful for passing product information to include in the resulting
    appliance file. Packer JSON configuration file example:

    ``` json
    {
      "type": "virtualbox-iso",
      "export_opts":
      [
        "--manifest",
        "--vsys", "0",
        "--description", "{{user `vm_description`}}",
        "--version", "{{user `vm_version`}}"
      ],
      "format": "ova",
    }
    ```

    A VirtualBox [VM
    description](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf)
    may contain arbitrary strings; the GUI interprets HTML formatting. However,
    the JSON format does not allow arbitrary newlines within a value. Add a
    multi-line description by preparing the string in the shell before the
    packer call like this (shell `>` continuation character snipped for easier
    copy & paste):

    ``` {.shell}

    vm_description='some
    multiline
    description'

    vm_version='0.2.0'

    packer build \
        -var "vm_description=${vm_description}" \
        -var "vm_version=${vm_version}"         \
        "packer_conf.json"
    ```

-   `format` (string) - Either `ovf` or `ova`, this specifies the output format
    of the exported virtual machine. This defaults to `ovf`.

-   `headless` (boolean) - Packer defaults to building VirtualBox virtual
    machines by launching a GUI that shows the console of the machine
    being built. When this value is set to `true`, the machine will start
    without a console.

-   `iso_target_extension` (string) - The extension of the iso file after
    download. This defaults to `iso`.

-   `iso_target_path` (string) - The path where the iso should be saved
    after download. By default will go in the packer cache, with a hash of the
    original filename as its name.

-   `iso_urls` (array of strings) - Multiple URLs for the ISO to download.
    Packer will try these in order. If anything goes wrong attempting to
    download or while downloading a single URL, it will move on to the next. All
    URLs must point to the same file (same checksum). By default this is empty
    and `iso_url` is used. Only one of `iso_url` or `iso_urls` can be specified.

-   `memory` (number) - The amount of memory to use for building the VM
    in megabytes. Defaults to `512` megabytes.

-   `output_directory` (string) - This is the path to the directory where the
    resulting virtual machine will be created. This may be relative or absolute.
    If relative, the path is relative to the working directory when `packer`
    is executed. This directory must not exist or be empty prior to running
    the builder. By default this is `output-BUILDNAME` where "BUILDNAME" is the
    name of the build.

-   `post_shutdown_delay` (string) - The amount of time to wait after shutting
    down the virtual machine. If you get the error
    `Error removing floppy controller`, you might need to set this to `5m`
    or so. By default, the delay is `0s` or disabled.

-   `shutdown_command` (string) - The command to use to gracefully shut down the
    machine once all the provisioning is done. By default this is an empty
    string, which tells Packer to just forcefully shut down the machine unless a
    shutdown command takes place inside script so this may safely be omitted. If
    one or more scripts require a reboot it is suggested to leave this blank
    since reboots may fail and specify the final shutdown command in your
    last script.

-   `shutdown_timeout` (string) - The amount of time to wait after executing the
    `shutdown_command` for the virtual machine to actually shut down. If it
    doesn't shut down in this time, it is an error. By default, the timeout is
    `5m` or five minutes.

-  `sound` (string) - Defaults to `none`. The type of audio device to use for
    sound when building the VM. Some of the options that are available are
    `dsound`, `oss`, `alsa`, `pulse`, `coreaudio`, `null`.

-   `ssh_host_port_min` and `ssh_host_port_max` (number) - The minimum and
    maximum port to use for the SSH port on the host machine which is forwarded
    to the SSH port on the guest machine. Because Packer often runs in parallel,
    Packer will choose a randomly available port in this range to use as the
    host port. By default this is `2222` to `4444`.

-   `ssh_skip_nat_mapping` (boolean) - Defaults to `false`. When enabled, Packer
    does not setup forwarded port mapping for SSH requests and uses `ssh_port`
    on the host to communicate to the virtual machine.

-   `usb` (boolean) - Specifies whether or not to enable the USB bus when
    building the VM. Defaults to `false`.

-   `vboxmanage` (array of array of strings) - Custom `VBoxManage` commands to
    execute in order to further customize the virtual machine being created. The
    value of this is an array of commands to execute. The commands are executed
    in the order defined in the template. For each command, the command is
    defined itself as an array of strings, where each string represents a single
    argument on the command-line to `VBoxManage` (but excluding
    `VBoxManage` itself). Each arg is treated as a [configuration
    template](/docs/templates/engine.html), where the `Name`
    variable is replaced with the VM name. More details on how to use
    `VBoxManage` are below.

-   `vboxmanage_post` (array of array of strings) - Identical to `vboxmanage`,
    except that it is run after the virtual machine is shutdown, and before the
    virtual machine is exported.

-   `bundle_iso` (boolean) - Defaults to `false`. When enabled, Packer includes
    any attached ISO disc devices into the final virtual machine. Useful for
    some live distributions that require installation media to continue to be
    attached after installation.

-   `virtualbox_version_file` (string) - The path within the virtual machine to
    upload a file that contains the VirtualBox version that was used to create
    the machine. This information can be useful for provisioning. By default
    this is `.vbox_version`, which will generally be upload it into the
    home directory. Set to an empty string to skip uploading this file, which
    can be useful when using the `none` communicator.

-   `vrdp_bind_address` (string / IP address) - The IP address that should be
    binded to for VRDP. By default packer will use `127.0.0.1` for this. If you
    wish to bind to all interfaces use `0.0.0.0`.

-   `vrdp_port_min` and `vrdp_port_max` (number) - The minimum and maximum port
    to use for VRDP access to the virtual machine. Packer uses a randomly chosen
    port in this range that appears available. By default this is `5900` to
    `6000`. The minimum and maximum ports are inclusive.

## Boot Configuration Reference

<%= partial "partials/common/bootcommand/BootConfig" %>

The boot command is sent to the VM through the `VBoxManage` utility in as few
invocations as possible. We send each character in groups of 25, with a default
delay of 100ms between groups. The delay alleviates issues with latency and CPU
contention. If you notice missing keys, you can tune this delay by specifying
"boot_keygroup_interval" in your Packer template, for example:

```
{
  "builders": [
    {
      "type": "virtualbox",
      "boot_keygroup_interval": "500ms"
      ...
    }
  ]
}
```

### Optional:

<%= partial "partials/common/bootcommand/BootConfig-not-required" %>

<%= partial "partials/builders/boot-command" %>

<%= partial "partials/builders/virtualbox-ssh-key-pair" %>

Example boot command. This is actually a working boot command used to start an
Ubuntu 12.04 installer:

``` text
[
  "<esc><esc><enter><wait>",
  "/install/vmlinuz noapic ",
  "preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg ",
  "debian-installer=en_US auto locale=en_US kbd-chooser/method=us ",
  "hostname={{ .Name }} ",
  "fb=false debconf/frontend=noninteractive ",
  "keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA ",
  "keyboard-configuration/variant=USA console-setup/ask_detect=false ",
  "initrd=/install/initrd.gz -- <enter>"
]
```

For more examples of various boot commands, see the sample projects from our
[community templates page](/community-tools.html#templates).

## Guest Additions

Packer will automatically download the proper guest additions for the version of
VirtualBox that is running and upload those guest additions into the virtual
machine so that provisioners can easily install them.

Packer downloads the guest additions from the official VirtualBox website, and
verifies the file with the official checksums released by VirtualBox.

After the virtual machine is up and the operating system is installed, Packer
uploads the guest additions into the virtual machine. The path where they are
uploaded is controllable by `guest_additions_path`, and defaults to
"VBoxGuestAdditions.iso". Without an absolute path, it is uploaded to the home
directory of the SSH user.

## VBoxManage Commands

In order to perform extra customization of the virtual machine, a template can
define extra calls to `VBoxManage` to perform.
[VBoxManage](https://www.virtualbox.org/manual/ch09.html) is the command-line
interface to VirtualBox where you can completely control VirtualBox. It can be
used to do things such as set RAM, CPUs, etc.

Extra VBoxManage commands are defined in the template in the `vboxmanage`
section. An example is shown below that sets the VRAM within the virtual machine:

``` json
{
  "vboxmanage": [
    ["modifyvm", "{{.Name}}", "--vram", "64"]
  ]
}
```

The value of `vboxmanage` is an array of commands to execute. These commands are
executed in the order defined. So in the above example, the memory will be set
followed by the CPUs.

Each command itself is an array of strings, where each string is an argument to
`VBoxManage`. Each argument is treated as a [configuration
template](/docs/templates/engine.html). The only available
variable is `Name` which is replaced with the unique name of the VM, which is
required for many VBoxManage calls.
