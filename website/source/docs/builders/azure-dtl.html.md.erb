---
description: 'Packer supports building Dev Test Labs Custom Images in Azure.'
layout: docs
page_title: 'Azure - Builders'
sidebar_current: 'docs-builders-azure'
---

# Azure Dev Test Labs Builder

Type: `azure-dtl`

Packer supports building [Dev Test Labs Custom Images in Azure](https://docs.microsoft.com/en-us/azure/lab-services/devtest-lab-overview)
Azure provides new users a [$200 credit for the first 30
days](https://azure.microsoft.com/en-us/free/); after which you will incur
costs for VMs built and stored using Packer.

Azure uses a combination of OAuth and Active Directory to authorize requests to
the ARM API. Learn how to [authorize access to
ARM](/docs/builders/azure-setup.html).

The documentation below references command output from the [Azure
CLI](https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/).

## Configuration Reference

The following configuration options are available for building Azure images. In
addition to the options listed here, a
[communicator](/docs/templates/communicator.html) can be configured for this
builder.

### Required options for authentication:
If you're running packer on an Azure VM with a [managed identity](/docs/builders/azure-setup.html#managed-identities-for-azure-resources)
you don't need to specify any additional configuration options.
If you would like to use interactive user authentication, you should specify
`subscription_id` only. Packer will use cached credentials or redirect you
to a website to log in.
If you want to use a [service principal](/docs/builders/azure-setup.html#create-a-service-principal)
you should specify `subscription_id`, `client_id` and one of `client_secret`,
`client_cert_path` or `client_jwt`.

-   `subscription_id` (string) - Subscription under which the build will be
    performed. **The service principal specified in `client_id` must have full
    access to this subscription, unless build\_resource\_group\_name option is
    specified in which case it needs to have owner access to the existing
    resource group specified in build\_resource\_group\_name parameter.**

-   `client_id` (string) - The Active Directory service principal associated with
    your builder.

-   `client_secret` (string) - The password or secret for your service principal.

-   `client_cert_path` (string) - The location of a PEM file containing a
    certificate and private key for service principal.

-   `client_jwt` (string) - The bearer JWT assertion signed using a certificate
    associated with your service principal principal. See [Azure Active
    Directory docs](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-certificate-credentials)
    for more information.

### Required:

<%= partial "partials/builder/azure/arm/Config-required" %>

Managed Image

When creating a managed image the following options are required.

-   `managed_image_name` (string) - Specify the managed image name where the
    result of the Packer build will be saved. The image name must not exist
    ahead of time, and will not be overwritten. If this value is set, the value
    `managed_image_resource_group_name` must also be set. See
    [documentation](https://docs.microsoft.com/en-us/azure/storage/storage-managed-disks-overview#images)
    to learn more about managed images.

-   `managed_image_resource_group_name` (string) - Specify the managed image
    resource group name where the result of the Packer build will be saved. The
    resource group must already exist. If this value is set, the value
    `managed_image_name` must also be set. See
    [documentation](https://docs.microsoft.com/en-us/azure/storage/storage-managed-disks-overview#images)
    to learn more about managed images.


Managed images can optionally be published to [Shared Image Gallery](https://azure.microsoft.com/en-us/blog/announcing-the-public-preview-of-shared-image-gallery/)
as Shared Gallery Image version. Shared Image Gallery **only** works with Managed Images. **A VHD cannot be published to
a Shared Image Gallery**. When publishing to a Shared Image Gallery the following options are required.

- `shared_image_gallery_destination` (object) The name of the Shared Image Gallery under which the managed image will be published as Shared Gallery Image version.

Following is an example.

<!-- -->

    "shared_image_gallery_destination": {
        "resource_group": "ResourceGroup",
        "gallery_name": "GalleryName",
        "image_name": "ImageName",
        "image_version": "1.0.0",
        "replication_regions": ["regionA", "regionB", "regionC"]
    }
    "managed_image_name": "TargetImageName",
    "managed_image_resource_group_name": "TargetResourceGroup"


<%= partial "partials/builder/azure/common/client/_Config" %>

### Optional:

<%= partial "partials/builder/azure/dtl/_Config-not-required" %>
<%= partial "partials/builder/azure/common/client/_Config-not-required" %>

## Basic Example

Here is a basic example for Azure.

``` json
{
    "type": "azure-dtl",

    "client_id": "fe354398-d7sf-4dc9-87fd-c432cd8a7e09",
    "client_secret": "keepitsecret&#*$",
    "subscription_id": "44cae533-4247-4093-42cf-897ded6e7823",
    "tenant_id": "de39842a-caba-497e-a798-7896aea43218",
    
    "managed_image_resource_group_name": "NewpackerRG",
    "managed_image_name": "vl9",

    "os_type": "Linux",
    "image_publisher": "Canonical",
    "image_offer": "UbuntuServer",
    "image_sku": "18.04-LTS",

    "azure_tags": {
        "dept": "Engineering",
        "task": "Image deployment"
    },
    "lab_name": "NewpackerRG",
    "vm_name" : "vl9",
    "lab_resource_group_name": "NewPackerRG",
    "location": "Central US",
    "vm_size": "Standard_DS2_v2"
}
```
Please refer to the Azure DTL
[examples](https://github.com/hashicorp/packer/tree/master/examples/azure/dtl) 

## Deprovision

Azure VMs should be deprovisioned at the end of every build. For Windows this
means executing sysprep, and for Linux this means executing the waagent
deprovision process. For Dev Test Lab images built using Packer, Deprovision is 
automatically applied. 

## Defaults

The Azure builder attempts to pick default values that provide for a just works
experience. These values can be changed by the user to more suitable values.

-   The default user name is packer not root as in other builders. Most distros
    on Azure do not allow root to SSH to a VM hence the need for a non-root
    default user. Set the ssh\_username option to override the default value.
-   The default VM size is Standard\_A1. Set the vm\_size option to override
    the default value.
-   The default image version is latest. Set the image\_version option to
    override the default value.
-   By default a temporary resource group will be created and destroyed as part
    of the build. If you do not have permissions to do so, use
    `build_resource_group_name` to specify an existing resource group to run
    the build in.

## Implementation

\~&gt; **Warning!** This is an advanced topic. You do not need to understand
the implementation to use the Azure builder.


### Linux 

The basic steps for a build are:

1.  Create a temporary resource group or use the common lab resource group specified 
    in the lab options.
2.  Validate and deploy a VM . Artifacts can be specified as parameters during 
    creation of the VM. We reccomend this option to speed up the creation of Virtual 
    Machine.
3.  Execute provision - defined by the user; typically shell commands.
    a) We can use Dev Test Lab artifacts as provsion step too. 
4.  Power off and capture the VM.
5.  Delete the resource group if temporarily created during creation. 
6.  Delete the temporary VM's OS disk.

The templates used for a build are currently fixed in the code. There is a
template for Linux, Windows, and KeyVault. The templates are themselves
templated with place holders for names, passwords, SSH keys, certificates, etc.

### What's Randomized?

The Azure builder creates the following random values at runtime.

-   Administrator Password: a random 32-character value using the *password
    alphabet*.
-   Certificate: a 2,048-bit certificate used to secure WinRM communication.
    The certificate is valid for 24-hours, which starts roughly at invocation
    time.
-   Certificate Password: a random 32-character value using the *password
    alphabet* used to protect the private key of the certificate.
-   Compute Name: a random 15-character name prefixed with pkrvm; the name of
    the VM unless specified in the parameters.

The default alphabet used for random values is
**0123456789bcdfghjklmnpqrstvwxyz**. The alphabet was reduced (no vowels) to
prevent running afoul of Azure decency controls.

The password alphabet used for random values is
**0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ**.

### Windows

The Windows implementation is very similar to the Linux build, with the
exception that it deploys a template to configure KeyVault. Packer communicates
with a Windows VM using the WinRM protocol. Windows VMs on Azure default to
using both password and certificate based authentication for WinRM. The
password is easily set via the VM parameters. The certificate is installed using a 
public Dev Test Artifact. 
When the Windows VM is deployed, it links to the certificate in KeyVault, and
Azure will ensure the certificate is injected as part of deployment.

The basic steps for a Windows build are:

1.  Create a temporary resource group or use the common lab resource group specified 
    in the lab options.
2.  Validate and deploy a VM . Artifacts can be specified as parameters during 
    creation of the VM. We reccomend this option to speed up the creation of Virtual 
    Machine.
3.  Execute provision - defined by the user; typically shell commands.
    a) We can use Dev Test Lab artifacts as provsion step too. 
4.  Power off and capture the VM.
5.  Delete the resource group if temporarily created during creation. 
6.  Delete the temporary VM's OS disk.

See the
[examples/azure](https://github.com/hashicorp/packer/tree/master/examples/azure/dtl)
folder in the packer project for more examples.
