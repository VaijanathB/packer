// Code generated by "mapstructure-to-hcl2 -type KeyValue,KeyValues,KVFilter"; DO NOT EDIT.
package hcl2template

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatKVFilter is an auto-generated flat version of KVFilter.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKVFilter struct {
	Filters map[string]string `cty:"filters"`
	Filter  []FlatKeyValue    `cty:"filter"`
}

// FlatMapstructure returns a new FlatKVFilter.
// FlatKVFilter is an auto-generated flat version of KVFilter.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KVFilter) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKVFilter)
}

// HCL2Spec returns the hcl spec of a KVFilter.
// This spec is used by HCL to read the fields of KVFilter.
// The decoded values from this spec will then be applied to a FlatKVFilter.
func (*FlatKVFilter) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"filters": &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
		"filter":  &hcldec.BlockListSpec{TypeName: "filter", Nested: hcldec.ObjectSpec((*FlatKeyValue)(nil).HCL2Spec())},
	}
	return s
}

// FlatKeyValue is an auto-generated flat version of KeyValue.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeyValue struct {
	Key   *string `cty:"key"`
	Value *string `cty:"value"`
}

// FlatMapstructure returns a new FlatKeyValue.
// FlatKeyValue is an auto-generated flat version of KeyValue.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeyValue) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeyValue)
}

// HCL2Spec returns the hcl spec of a KeyValue.
// This spec is used by HCL to read the fields of KeyValue.
// The decoded values from this spec will then be applied to a FlatKeyValue.
func (*FlatKeyValue) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"key":   &hcldec.AttrSpec{Name: "key", Type: cty.String, Required: false},
		"value": &hcldec.AttrSpec{Name: "value", Type: cty.String, Required: false},
	}
	return s
}
